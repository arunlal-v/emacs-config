#+TITLE: My Emacs Config
#+AUTHOR: Arunlal
* SENSIBLE DEFAULTS
** VARIABLES
*** Prevent dired from using new buffers for all traversed directories (Since emacs 28)
  #+BEGIN_SRC emacs-lisp
    (setf dired-kill-when-opening-new-dired-buffer t)
  #+END_SRC
*** Auto saves and backup in temp directory
  #+begin_src emacs-lisp
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))
  #+end_src
*** Default directory will be home directory
#+begin_src emacs-lisp
  (global-set-key (kbd "M-;")
		  'sensible-defaults/comment-or-uncomment-region-or-line)
#+end_src
*** GC threshold to higher value
#+begin_src emacs-lisp
  (setq gc-cons-threshold 20000000)
#+end_src
*** Delete selection mode
#+begin_src emacs-lisp
  (delete-selection-mode t)
#+end_src
*** Add file sizes in human-readable units (KB, MB, etc) to dired buffers.
#+begin_src emacs-lisp
  (setq-default dired-listing-switches "-alh")
#+end_src
*** Don't ask `yes/no?', ask `y/n?'.
#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src
*** Auto refresh buffers
#+begin_src emacs-lisp
  (global-auto-revert-mode t)
#+end_src
*** Visible bell
#+begin_src emacs-lisp
  (setq visible-bell t)
#+end_src
*** Don't assume that sentences should have two spaces after period
#+begin_src emacs-lisp
  (setq sentence-end-double-space nil)
#+end_src
** KEYMAPS REBINDING
*** Home and End key settings
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "<home>") 'move-beginning-of-line)
    (global-set-key (kbd "<end>") 'move-end-of-line)
  #+END_SRC
*** Comment single line or region
#+begin_src emacs-lisp
    (defun sensible-defaults/comment-or-uncomment-region-or-line ()
    "Comments or uncomments the region or the current line if
  there's no active region."
    (interactive)
    (let (beg end)
      (if (region-active-p)
	  (setq beg (region-beginning) end (region-end))
	(setq beg (line-beginning-position) end (line-end-position)))
      (comment-or-uncomment-region beg end)))
   (global-set-key (kbd "M-;")
                  'sensible-defaults/comment-or-uncomment-region-or-line)
#+end_src
** HOOKS
*** Trim trailing whitespaces before saving
#+begin_src emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src
*** Prompt to create parent directories, if not exists, when saving file
#+begin_src emacs-lisp
  (add-hook 'before-save-hook
            (lambda ()
              (when buffer-file-name
                (let ((dir (file-name-directory buffer-file-name)))
                  (when (and (not (file-exists-p dir))
                             (y-or-n-p (format "Directory %s does not exist. Create it?" dir)))
                    (make-directory dir t))))))
#+end_src
* PACKAGE MANAGEMENT
  ** Setup package.el to work with MELPA
  #+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives
  '("melpa" . "https://melpa.org/packages/"))
  (package-refresh-contents)
  (package-initialize)
  #+END_SRC
  ** Installing use-package
  #+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
  (package-install 'use-package))
  #+END_SRC

* NAVIGATION and SELECTION ENHANCEMENTS
** Select quicker using expand-region
#+begin_src emacs-lisp
  (use-package expand-region :ensure t :bind ("C-;" . er/expand-region))
#+end_src
* Text Movement
** Move text using MoveText
#+begin_src emacs-lisp
  (use-package move-text :ensure t)
  (move-text-default-bindings)
#+end_src
* Hungry Deletion
#+begin_src emacs-lisp
  (use-package hungry-delete :ensure t)
  (global-hungry-delete-mode  1)
  (setq hungry-delete-join-reluctantly t)
#+end_src
* Dired-x for opening multiple files at once
This will replace find-file and find-file-other-window with the dired-x equivalents
This will allow multiple files to be opened at once
#+begin_src emacs-lisp
    (with-eval-after-load 'dired
      (require 'dired-x))
#+end_src
* ORG Mode display preferences
   [[https://github.com/hrs/dotfiles/blob/main/emacs/.config/emacs/configuration.org][Harry's dotfiles]]
   I like to see an outline of pretty bullets instead of a list of asterisks.

#+begin_src emacs-lisp
  (use-package org-superstar :ensure t
    :config
    (setq org-superstar-special-todo-items t)
    (setq org-hide-leading-stars t)
    (add-hook 'org-mode-hook (lambda ()
			       (org-superstar-mode 1))))
#+end_src

   This hides the slashes and stars that denote /emphasis/ and *bold* text unless point is on said text.

#+begin_src emacs-lisp
  (setq org-hide-emphasis-markers t)

  (use-package org-appear :ensure t
    :hook (org-mode . org-appear-mode))
#+end_src

    Visibly render mathematical symbols.

#+begin_src emacs-lisp
  (setq org-pretty-entities t)
#+end_src

    Show linked images directly in my Org document. Don't fully expand enormous images; instead, use =imagemagick= to display them at a manageable size.

#+begin_src emacs-lisp
  (setq org-startup-with-inline-images t
        org-image-actual-width '(600))
#+end_src

    Use syntax highlighting in source blocks while editing.

#+begin_src emacs-lisp
  (setq org-src-fontify-natively t)
#+end_src

   Make TAB act as if it were issued in a buffer of the language's major mode.

#+begin_src emacs-lisp
  (setq org-src-tab-acts-natively t)
#+end_src

    When editing a code snippet, use the current window rather than popping open a
    new one (which shows the same information).

#+begin_src emacs-lisp
  (setq org-src-window-setup 'current-window)
#+end_src

   Quickly insert a block of elisp:

#+begin_src emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("el" . "src emacs-lisp"))
#+end_src

    Don't indent newly expanded blocks, even if they're under a heading.

#+begin_src emacs-lisp
  (setq org-adapt-indentation nil)
#+end_src

    When hitting =C-<return>= to create a new heading, don't insert the heading
    between the current heading and its content, but instead append it /after/ the
    content.

#+begin_src emacs-lisp
  (setq org-insert-heading-respect-content t)
#+end_src
Variable font
Display different fonts
#+begin_src emacs-lisp
;; Highlight Line Colors
(add-hook 'org-mode-hook (lambda ()
(set-face-attribute 'org-level-1 nil                   :font "SauceCodePro Nerd Font" :height 220 :foreground "#FDF0ED")
(set-face-attribute 'org-level-2 nil                   :font "Ubuntu Nerd Font" :height 200 :foreground "#25B2BC")
(set-face-attribute 'org-level-3 nil                   :font "Ubuntu Nerd Font" :height 180)
(set-face-attribute 'org-level-4 nil                   :font "Ubuntu Nerd Font" :height 160 :italic nil)
))
#+end_src
* DASHBOARD
  Emacs dashboard is an extensible startup screen showing you recent files, bookmarks, agenda items, and an Emacs banner.
  #+BEGIN_SRC emacs-lisp
  (use-package all-the-icons :ensure t) ;;Make sure all-the-icons package is installed
  ;;Ensure to run the command: all-the-icons-install-fonts
  (use-package dashboard
  :ensure t ;;install dashboard if not installed
  :init ;; tweak dashboard's configuration before loading it
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "Keep Walking!")
  (setq dashboard-startup-banner "~/.emacs.d/keep-walking.png")
  (setq dashboard-center-content nil)
  (setq dashboard-items '(
      (recents . 10)
      (agenda . 5)
      (bookmarks . 5)
      (registers . 5)
  ))
  :config
  (dashboard-setup-startup-hook)
  (dashboard-modify-heading-icons '(
    (recents. "file-text")
    (bookmarks . "book"))))
  ;;This is for client mode
  (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
  #+END_SRC
* ZOOM
** Zooming in and out
  Use Ctrl = and Ctrl - to increase and decrease scale
  #+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-=") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
  (global-set-key (kbd "C-0") (lambda () (interactive) (text-scale-adjust 0)))
  (global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
  (global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
  #+END_SRC
* SEARCH SETTINGS
  **All menu bars, tools bars
  #+BEGIN_SRC emacs-lisp
  (setq lazy-highlight-cleanup nil) ;;This is to retain search highlight after searching is complete
  #+END_SRC
* GUI SETTINGS
** All menu bars, tools bars
  #+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (global-display-line-numbers-mode 1)
  (setq-default line-spacing 0.10)
  (setq display-line-numbers-type 'relative)
  #+END_SRC
** Cursor
  #+BEGIN_SRC emacs-lisp
    (use-package beacon
    :ensure t)
    (beacon-mode 1)
  #+END_SRC
** Volatile highlights
#+begin_src emacs-lisp
  (use-package volatile-highlights :ensure t)
  (volatile-highlights-mode t)
#+end_src
** Highlight numbers
#+begin_src emacs-lisp
  (use-package highlight-numbers :ensure t)
  (add-hook 'prog-mode-hook 'highlight-numbers-mode)
  (add-hook 'sql-mode-hook 'highlight-numbers-mode)
#+end_src
* PROCECTILE
  #+BEGIN_SRC emacs-lisp
  (use-package projectile
  :ensure t
  :config
  (projectile-global-mode 1))
  #+END_SRC

* WHICH KEY
  **give all the commands bound to a prefix key
  #+BEGIN_SRC emacs-lisp
  (use-package which-key
  :ensure t)
  (which-key-mode)
  (which-key-setup-side-window-bottom)
  #+END_SRC

* MAGIT
  #+begin_src emacs-lisp
      (use-package magit :ensure t)
      (setq magit-clone-set-remote-head t) ;;Preserve git's default of setting remote head, instead of magit's delete
  #+end_src
* WEB Development
  **Modes and tools for web development
  #+BEGIN_SRC emacs-lisp
  (use-package js2-mode :ensure t)
  (use-package emmet-mode :ensure t)
  (use-package markdown-mode :ensure t)
  (use-package web-mode :ensure t)
  (use-package prettier :ensure t)
  (electric-pair-mode 1)
  (emmet-mode 1)
  #+END_SRC
* KEY CAST for displaying keys and commands in mode line
  https://www.youtube.com/watch?v=L9GcNrhx-iE
  **Modes and tools for web development
  #+BEGIN_SRC emacs-lisp
  (use-package keycast :ensure t)
;;  (keycast-mode) ;;  Disable keycast mode by default
  #+END_SRC
* Company mode for autocompletion
  #+BEGIN_SRC emacs-lisp
  (use-package company :ensure t)
  (company-mode 1)
  #+END_SRC
* BUFFER MENU Customizations
** Auto-completion ignore case
  #+BEGIN_SRC emacs-lisp
  (setq completion-ignore-case t)
  (setq read-file-name-completion-ignore-case t)
  (setq read-buffer-completion-ignore-case t)
  #+END_SRC
* HISTORY
  #+BEGIN_SRC emacs-lisp
  (savehist-mode 1)
  #+END_SRC
* GOLDPLATING
** FONT
  All fonts can be found at
  https://github.com/ryanoasis/nerd-fonts/tree/master/patched-fonts/SourceCodePro/Regular/complete
  https://github.com/ryanoasis/nerd-fonts/tree/master/patched-fonts/Ubuntu/Regular/complete
  For windows, the font name should be different. This name can be found in the font manager against the tag Font Name.
  For instance, the below mentioned fonts will be "SauceCodePro NF 11" and "Ubuntu NF 11"
  #+BEGIN_SRC emacs-lisp
    (set-face-attribute 'default nil
      :font "SauceCodePro Nerd Font 11"
      :weight 'medium)
    (set-face-attribute 'variable-pitch nil
      :font "Ubuntu Nerd Font 11"
      :weight 'medium)
    (set-face-attribute 'fixed-pitch nil
      :font "SauceCodePro Nerd Font 11"
      :weight 'medium)
    ;;Needed for client
    (add-to-list 'default-frame-alist '(font . "SauceCodePro Nerd Font 11"))
  #+END_SRC
** THEME
  ** Doom emacs
  #+BEGIN_SRC emacs-lisp
  (use-package doom-themes
  :ensure t)
  (setq doom-themes-enable-bold t doom-themes-enable-italic t)
  (load-theme 'doom-shades-of-purple t)
  #+END_SRC
** MODE LINE
  **doom mode line
  #+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
  :ensure t)
  (doom-modeline-mode 1)
  #+END_SRC
